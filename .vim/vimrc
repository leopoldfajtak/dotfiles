set nocompatible              " required
filetype off                  " required

" cleanup of ~
if !has('nvim')
  set viminfo+=n~/.vim/viminfo
endif

packadd minpac
call minpac#init()

call minpac#add('altercation/vim-colors-solarized')
call minpac#add('chriskempson/base16-vim')
call minpac#add('christoomey/vim-tmux-navigator')
call minpac#add('k-takata/minpac', {'type':'opt'})
call minpac#add('kana/vim-textobj-entire')
call minpac#add('kana/vim-textobj-user')
call minpac#add('machakann/vim-highlightedyank')
call minpac#add('preservim/vimux')
call minpac#add('tmhedberg/SimpylFold')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-surround')
call minpac#add('vim-scripts/indentpython.vim')
call minpac#add('vim-syntastic/syntastic')
call minpac#add('ycm-core/YouCompleteMe')
" call minpac#add('nvie/vim-flake8')

" minpac commands:
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

set t_Co=256
syntax enable
if has('gui_running')
  set background=light
else
  set background=dark
endif

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"
" Run command in  Vimux
" More such bindings can be found at https://www.bugsnag.com/blog/tmux-and-vim
" TODO check if this plugin is stell needed with neovim's terminal
let mapleader = ","
map <leader>vp :VimuxPromptCommand<cr>

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = '--ignore=E221,E241,E251'

"if commented out colorscheme will be taken from shell
colorscheme solarized
highlight LineNr ctermfg=102
highlight link jsonNumber javaScriptNumber
highlight link jsonBoolean javaScriptFunction
highlight link pythonOperator pythonExClass

set encoding=utf-8
set fileencoding=utf-8

set foldmethod=syntax

" Make tab characters in document visible
set list
set listchars=tab:â–¸\
" Print spaces instead of tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction
nmap <S-Tab> :call Stab()<CR>

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
" Remove traling whitespaces
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
" Reformat indentations
nmap _= :call Preserve("normal gg=G")<CR>

set laststatus=1
set ruler
set number
set incsearch
set hlsearch
set ignorecase
set smartcase
set autoindent
set smartindent
set nostartofline
set noswapfile
set scrolloff=3
set clipboard=unnamed
set history=200

" Neovim only options
if has('nvim')
  set inccommand=split
endif

" Vim only options
if !has('nvim')
  map y <Plug>(highlightedyank)
endif

" Easier split navigation
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
" Easy folding
" nnoremap <space> za

" Easier navigation of ex history
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Example for using repeat.vim to create new
" repeatable mappings
nmap <silent> <Plug>TransposeCharacters xp
      \:call repeat#set("\<Plug>TransposeCharacters")<CR>
nmap cp <Plug>TransposeCharacters

if has("autocmd")
  " Enable file type detection
  filetype on

  " Syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  " Customisations based on house-style (arbitrary)
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
  autocmd FileType python setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType tex setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType vim setlocal ts=2 sts=2 sw=2 expandtab

  " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml

  autocmd StdinReadPre * let s:std_in=1
  " make .brik and .mbrik documents open with latex coloring
  autocmd BufNewFile,BufRead *.brik set filetype=tex syntax=tex
  autocmd BufNewFile,BufRead *.mbrik set filetype=tex syntax=tex
  autocmd BufNewFile,BufRead *.lytex set filetype=tex syntax=tex

  " Additional comment strings for vim-commentary
  autocmd FileType tex setlocal commentstring=\%\ %s
endif

" lilypond
filetype off
set runtimepath+=/usr/local/share/lilypond/current/vim/
filetype on
syntax on
